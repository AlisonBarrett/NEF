#==========================================================================
#  Nmr Exchange Format
#
#  Draft version 0.6  September 2014 Rasmus Fogh, 
#
#  The file shows an example of how data might be organised, with limited comments
#  for clarification.
# 
#  The style is nmr-star.
#
# 
#  Accompanying documents include an explanation of the format, a detailed specifications file,
#  the equivalent CIF document, and a JSON representation of the example file.

data_my_nmr_project_1

#
#===========================================================================
# Section 1
#
# Mandatory: nmr meta data 
#
# Singleton (only one per project)
#
#========================================================================


save_nmr_meta_data

# Mandatory: 
  _nmr_meta_data.sf_category           		nmr_meta_data
  _nmr_meta_data.sf_framecode           	nmr_meta_data
  
  _nmr_meta_data.format_name                  Nmr_Exchange_Format
  _nmr_meta_data.format_version               0.6
  _nmr_meta_data.program_name                 Cyana
  _nmr_meta_data.program_version              3.1
  _nmr_meta_data.creation_date                2013-02-29T13:12:03

# Optional:
  _nmr_meta_data.coordinate_file_name         ?

# Optional loops (to end of saveframe):

# Related database entries
  loop_
  _related_entries.database_name
  _related_entries.database_accession_code

    BMRB   12345
    BMRB   22277
    PDB    2k5v
    PDB    2hhx
    PDB    1aap
   stop_

# Program scripts used
  loop_
    _program_script.program_name
    _program_script.script_name
    _program_script.script
    _program_script.cyana_parameter_1

    	Cyana  init.cya 
;
rmsdrange:=1-93

cyanalib

read seq protein.seq

;
   	5
	Cyana  init2.cya 
;
rmsdrange:=3-90

cyanalib

read seq protein.seq

;
   	12
  stop_
  
# NOTE: cyana_parameter_1 is an example of a program-specific attribute.



# Data history loop
  loop_ 
    _run_history.run_ordinal
    _run_history.program_name
    _run_history.program_version
    _run_history.script_name
    _run_history.script

    1   TOPSPIN  3.1   mypulprog.name 
;
INSERT PULSE PROGRAM HERE

; 

    2   UNIO  ? ? ?
  stop_
  
# NOTE: The values in this loop refer to previous runs, and so contain 
# different information from the _program_script loop.

save_

#========================================================================
# Section 2 
#
# Optional: Example of program-specific saveframe:
#
#=========================================================================

save_cyana_additional_data_1

# Mandatory: 
  _cyana_additional_data.sf_category           	cyana_additional_data
  _cyana_additional_data.sf_framecode           cyana_additional_data_1

  _cyana_additional_data.cyana_special_version  5

save_


#=========================================================================
#
# Section 3
# 
# Mandatory: Molecular system 
#
# Singleton (only one per data block)
#
#=======================================================================


save_molecular_system

# Mandatory: 
  _molecular_system.sf_category           	molecular_system
  _molecular_system.sf_framecode          	molecular_system

# Mandatory:
  loop_
    _sequence.chain_code
    _sequence.sequence_code 
    _sequence.residue_type
    _sequence.residue_variant
    _sequence.linking
    _sequence.cross_linking

    A   13      ALA     ALA_LSN3  	start	.
    A	14	TRP	.		.	.
    A	15	GLY	.		.	.
    A	16	ASN	.		.	.
    A	17	VAL	.		.	.
    A	18	PHE	.		.	.
    A	19	LEU	.		.	.
    A   20      CYS     CYS_LL_DHG	.	disulfide
    A   21      ALA     .         	.	.
    A   22      THR     THR_LL_DHG1    	.	link
    A   23      LYS     LYS_LL		.	.
    A   24      ASP     ASP_LL_DHD2     .	.
    A   25      HIS     HIS_LEO2      	end	.
    A	26	GLC	.  	  	.	link
    B	17	CYS	CYS_LFZW_DHG	single	disulfide
    C    1      ATP     .         	single	.
  stop_

# Chain A is a linear dodecapeptide (15-25), disulfide linked to a single cysteine, 
# with a glucose linked to THR 22
# The GLC is given with chaincode A, the CYS with code B; both forms are allowed
# Chain C is free ATP
# 
# The residue_type is the canonical name, and the residue_variant shows specific variants, 
# using RCSB residue-variant codes.. 
# The linking column shows information on how chains begin and end,
# whereas the cross-linnking column shows the presence of crosslinks.
# Currently two types are supported, 'disulfide' and generic 'link'; more could be added.


# Covalent cross-links loop. Optional:
  loop_
    _covalent_links.chain_code_1
    _covalent_links.sequence_code_1
    _covalent_links.residue_type_1
    _covalent_links.atom_name_1
    _covalent_links.chain_code_2
    _covalent_links.sequence_code_2
    _covalent_links.residue_type_2
    _covalent_links.atom_name_2

    A 20 CYS SD B 17 CYS SD
    A 22 THR OG1 A 26 GLC C1
  stop_

save_



#===========================================================================
# Section 4
#
# Mandatory: Chemical shift table(s)
#===========================================================================

save_chemical_shift_list_1

# All tags in this saveframe are mandatory 
# (shift uncertainty can be given as '?' if unknown).

  _chemical_shift_list.sf_category           	chemical_shift_list
  _chemical_shift_list.sf_framecode          	chemical_shift_list_1
  
  _chemical_shift_list.atom_chem_shift_units      ppm  
  
  loop_
      _chemical_shift.chain_code
      _chemical_shift.sequence_code
      _chemical_shift.residue_type
      _chemical_shift.atom_name
      _chemical_shift.value
      _chemical_shift.value_uncertainty

      A	15	GLY	QA	 3.42	0.02
      A 17      VAL     HG#      0.73   0.02
      A 17      VAL     CG#     22.1    0.3
      A 18      PHE     HB2      2.87   0.02
      A 18      PHE     HB3      2.42   0.02
      A 19      LEU     HBX      2.13   0.02
      A 19      LEU     HBY      2.51   0.02
      A 19      LEU     HDX#     0.87   0.02
      A 19      LEU     HDY#     0.73   0.02
      A 19      LEU     CDX     17.4    0.3
      A 19      LEU     CDY     18.7    0.3
      A 21      ALA     HA       4.17   0.02
      A 21      ALA     H        8.33   0.02
      A 21      ALA     HB#      1.34   0.02
      A 23      LYS     HA       4.27   0.02
      A 23      LYS     H        8.45   0.04
      A 23      LYS     CA      43.2    0.25
      A 23      LYS     N      123.45   0.4
     @1 SS@231  GLX?    CAi-1   48.2     ?
  stop_

# The atom_name by itself serves to distinguish between real atoms ('HA'), pseudoatoms ('QA'),
# sets of atoms ('HB#'), sterospecifically assigned atoms ('HB2'), and non-stereospecifically 
# assigned atoms ('HBX').
# In the example, Phe 18 HB2/HB3 are stereospecifically assigned, while Leu 19 is not. 
# Gly 15 QA is a pseudoatom, i.e. an atom at the HA2/HA3 centroid with zero van der Waals radius.
# Val 17 HG#/CG# show two methyl groups that overlap in both carbon and proton dimensions.
# 19 LEU HDX# is the mnethyl bound to CDX (and not to CDY).
# The last shift (with chain_code @1) is an unassigned but observed resonance, specifically the
# Ca atom i-1 to spin system SS@231. The residue type (GLX?) applies to SS@231.

save_


#=======================================================================
# Section 5
# 
# Optional: Distance restraint list(s)
#
# There must be one saveframe for each restraint list - this is how 
# grouping is managed. 
#
#=======================================================================


save_distance_restraint_list_L1


# Mandatory parameters
  _distance_restraint_list.sf_category          distance_restraint_list
  _distance_restraint_list.sf_framecode         distance_restraint_list_L1
  
  _distance_restraint_list.potential_type       square-well-parabolic


# potential_type values are:
#    "log-normal"                   single parameter (target_value)
#    "parabolic"                    single parameter (target_value)
#    "square-well-parabolic"        one or two parameters   (upper and lower limit) 
#    "square-well-parabolic-linear" four parameters  ()

  loop_ 
  # Mandatory parameters
    _distance_restraint.restraint_id
    _distance_restraint.restraint_combination_id
    _distance_restraint.chain_code_1
    _distance_restraint.sequence_code_1
    _distance_restraint.residue_type_1
    _distance_restraint.atom_name_1
    _distance_restraint.chain_code_2
    _distance_restraint.sequence_code_2
    _distance_restraint.residue_type_2
    _distance_restraint.atom_name_2
    _distance_restraint.weight
    
  # The following two parameters are mandatory. 
  # If they are not defined for a given potential they can be given a value of '?'
    _distance_restraint.target_value
    _distance_restraint.target_value_uncertainty
    
  # Optional parameters - use only the ones needed for the potential:
  # _distance_restraint.lower_limit
    _distance_restraint.upper_limit
  # _distance_restraint.lower_linear_limit
  # _distance_restraint.upper_linear_limit
  
  # This example shows pure upper-limit restraints

    1  .   A 21  ALA  HB#  A 17  VAL  H   1.00 3.7  ?  4.2
    1  .   A 21  ALA  HB#  A 18  LEU  H   1.00 3.7  ?  4.2
    1  .   A 22  THR  HG2# A 17  VAL  H   1.00 3.7  ?  4.2
    1  .   A 22  THR  HG2# A 18  LEU  H   1.00 3.7  ?  4.2
    5  .   A 18  PHE  HB2  A 24  ASP  HBX 1.00 2.8  ?  3.2
    8  .   A 18  PHE  HB2  A 24  ASP  HBY 1.00 4.4  ?  5.2
  stop_

  # The first line gives the restraint ID.  
  # Lines with the same restraint_id are combined into a single restraint 
  # (OR operations, effectively an ambiguous assignment). 
  # The restraint_combination_id is used for more complex logic - 
  # see dihedral restrains for an example.
  # Note that there is no unique identifier for each line, 

  # Each line (sub-restraint) of the table has its own independent 
  # parameters (weight, target_value, upper_limit, etc.), which may be different
  # within the same restraint.

save_

#============================================================================
# Section 6
#
# Optional: Dihedral restraint list(s)
#============================================================================


save_dihedral_restraint_list_L2

# Mandatory parameters:
  _dihedral_restraint_list.sf_category          dihedral_restraint_list
  _dihedral_restraint_list.sf_framecode         dihedral_restraint_list_L2
  
  _dihedral_restraint_list.potential_type     	square-well-parabolic

  loop_
  # Mandatory parameters
    _dihedral_restraint.restraint_id
    _dihedral_restraint.restraint_combination_id
    _dihedral_restraint.chain_code_1
    _dihedral_restraint.sequence_code_1
    _dihedral_restraint.residue_type_1
    _dihedral_restraint.atom_name_1
    _dihedral_restraint.chain_code_2
    _dihedral_restraint.sequence_code_2
    _dihedral_restraint.residue_type_2
    _dihedral_restraint.atom_name_2
    _dihedral_restraint.chain_code_3
    _dihedral_restraint.sequence_code_3
    _dihedral_restraint.residue_type_3
    _dihedral_restraint.atom_name_3
    _dihedral_restraint.chain_code_4
    _dihedral_restraint.sequence_code_4
    _dihedral_restraint.residue_type_4
    _dihedral_restraint.atom_name_4
    _dihedral_restraint.weight
    
  # The following two parameters are mandatory. 
  # If they are not defined for a given potential they can be given a value of '?'
    _dihedral_restraint.target_value
    _dihedral_restraint.target_value_uncertainty
    
  # Optional parameters - use only the ones needed for the potential:
    _dihedral_restraint.lower_limit
    _dihedral_restraint.upper_limit
  # _dihedral_restraint.lower_linear_limit
  # _dihedral_restraint.upper_linear_limit

1  .  A 21 ALA N  A 21 ALA CA  A 21 ALA  C  A 22 THR N 1.00 -50.0 5.0 -60.0 -40.0
1  .  A 21 ALA N  A 21 ALA CA  A 21 ALA  C  A 22 THR N 1.00 105.0 5.0  90.0 120.0
2  .  A 12 ALA C  A 22 THR N   A 22 THR CA  A 22 THR C 3.00 -50.0 8.0 -60.0 -40.0
3  1  A 23 LYS C  A 24 ASP N   A 24 ASP CA  A 24 ASP C 1.00 -50.0 5.0 -60.0 -40.0
3  1  A 24 ASP N  A 24 ASP CA  A 24 ASP  C  A 25 HIS N 1.00 105.0 5.0  90.0 120.0 
4  2  A 15 GLY C  A 16 ASN N   A 16 ASN CA  A 16 ASN C 1.00 -50.0 5.0 -60.0 -40.0
4  2  A 16 ASN N  A 16 ASN CA  A 16 ASN  C  A 17 CYS N 1.00 105.0 5.0  90.0 120.0 
4  3  A 15 GLY C  A 16 ASN N   A 16 ASN CA  A 16 ASN C 1.00 -80.0 5.0 -90.0 -70.0
4  3  A 16 ASN N  A 16 ASN CA  A 16 ASN  C  A 17 CYS N 1.00 155.0 5.0 140.0 170.0

stop_

  # - Restraint 1 is an ambiguous psi restraint. The atoms are the same, 
  #   but there are two allowed angle ranges in this case, so there are
  #   two sub-restraints with different parameters on the two lines.
  # 
  #   Restraint 2 is a normal phi restraint - note the different weight.
  # 
  #   Restraint 3 is a combination of a phi and a psi restraint AND'ed 
  #   together. Normally this kind of restraint would rarely be used 
  #   - you would simply divide this into two separate restraints - 
  #   but it is put here to show how the restraint_combination_id works.
  # 
  #   Restraint 4 defines two separate non-contiguous regions in the 
  #   Ramachandran plot, and shows how the restraint_combination_id  
  #   is used in practice. The logic of the restraint is (item1 AND item2) OR (item3 AND item4) 
  #
  #   Subrestraints with the same restraint_combination_id 
  #   are AND'ed together, after which groups and individual 
  #   subrestraints within a given restraint are OR'ed as usual.
  #   restraint_combination_id are unique across the entire table, so
  #   you can select a set of AND'ed restraints by selecting all lines
  #   with the same index in the combination_id column. Only 
  #   restraint items within the same restraint can be AND'ed together, 
  #   or, in other words, a given restraint_combination_id can only be
  #   used within the same restraint.

save_


#=======================================================================
# Section 7
# 
# Optional: RDC restraint list(s)
#=======================================================================

save_rdc_restraint_list_1

# Mandatory parameters
  _rdc_restraint_list.sf_category           	rdc_restraint_list
  _rdc_restraint_list.sf_framecode           	rdc_restraint_list_1
  
  _rdc_restraint_list.potential_type            log-normal

  loop_
      _rdc_restraint.restraint_id    
      _rdc_restraint.restraint_combination_id
      _rdc_restraint.chain_code_1
      _rdc_restraint.sequence_code_1
      _rdc_restraint.residue_type_1
      _rdc_restraint.atom_name_1
      _rdc_restraint.chain_code_2
      _rdc_restraint.sequence_code_2
      _rdc_restraint.residue_type_2
      _rdc_restraint.atom_name_
      _rdc_restraint.weight
    
  # The following two parameters are mandatory. 
  # If they are not defined for a given potential they can be given a value of '?'
    _rdc_restraint.target_value
    _rdc_restraint.target_value_uncertainty
    
  # Optional parameters - use only the ones needed for the potential:
  # _rdc_restraint.lower_limit
  # _rdc_restraint.upper_limit' 
  # _rdc_restraint.lower_linear_limit
  # _rdc_restraint.upper_linear_limit

    1 .  A  21  ALA  H  A  21  ALA  N  1.00 -5.2  0.33
    2 .  A  22  THR  H  A  22  THR  N  1.00  3.1  0.40
  stop_

  # NBNB We also need to store alignment tensors here, as these are 
  #  sometimes used as input. 
save_



#=======================================================================
# Section 8
#
# Optional: Peak list(s)
#=======================================================================


save_nmr_spectrum_cnoesy1

# Mandatory parameters
  _nmr_spectrum.sf_category           		nmr_spectrum
  _nmr_spectrum.sf_framecode			nmr_spectrum_cnoesy1
  
  _nmr_spectrum.num_dimensions        		3
  _nmr_spectrum.chemical_shift_list		$chemical_shift_list_1
  _nmr_spectrum.experiment_classification   	H_H[N].through-space  
  _nmr_spectrum.experiment_type             	15N-NOESY-HSQC
  
  # experiment_classification and experiment_type can be given as '?' if not known.
 
  # The chemical_shift_list gives the saveframe id within the project for the saveframe
  # that contains the relevant chemical shift list.

  # The experiment_classification uses the CCPN convention 
  # See http://link.springer.com/article/10.1007%2Fs10858-006-9076-z  
  #
  # The experiment_type is freely settable by the user/ program.

  loop_

      _spectrum_dimension.dimension_id
      _spectrum_dimension.axis_unit
      _spectrum_dimension.axis_code  
      _spectrum_dimension.spectrometer_frequency 
      _spectrum_dimension.spectral_width 
      _spectrum_dimension.value_first_point 
      _spectrum_dimension.folding   
      _spectrum_dimension.absolute_peak_positions
      _spectrum_dimension.is_acquisition

      1  ppm  1H   500.139  10.4    9.9	circular  true    false
      2  ppm 15N    98.37   30.7  127.0	circular  true    false
      3  ppm  1H   500.139  14.2   11.8	none	  true    true
  stop_
  
# dimension_id, axis_unit, and axis_code must be given for data to be usable.
# Other columns can be given value '?' it not known.

# - axis_unit could be 'Hz' 'ppm', 'point', 's', ...
# - axis_code is the isotope (in the form '1H', '13C', ...) for shifts, 
#   e.g. 'delay' for a T1 time axis. More complicated versions will be 
#   needed for J-coupling, multiple-quantum and other non-shift axes. 
# - Spectrometer frequency is in MHz
# - spectral_width  is the acquisition SW, that is used for folding, in units of axis_unit
#   Similarly, value_first_point is the value for point 1 in the spectrum after Fourier transformation
#   i..e *before* then removal of any points. 
# - folding can be either 'mirror' (seq. quadrature), 'circular' (std. aliasing, for sim. quadrature),
#   or 'none'
# - absolute_peak_positions determines if peak positionos are correct or may be folded/aliased. 
#   If 'false' all peaks are given in the acquisition window, whether this is 
#   their correct position or not.
#   If 'true' peaks are given at their correct position, whether this is 
#   in the acquisition window or not. 
# - is_acquisition  Is this the acquisition dimension? 
#
# Strictly speaking, 'folding' and 'spectral_width' are only necessary if 'absolute_peak_positions'
# is false, and 'value_first_point' is only necessary if folding also is 'mirror'.
# It is still recommended to put in all parameters where known.

# Mandatory loop - may be length zero if data are not known..

  loop_
      _spectrum_dimension_transfer.dimension_1 
      _spectrum_dimension_transfer.dimension_2 
      _spectrum_dimension_transfer.transfer_type

      1 3 through-space
      2 3 onebond
  stop_

  # transfer_type enumeration: 
      # 'onebond'		# atoms directly bound, whatever the transfer mechanism
      # 'Jcoupling'		# J coupling over one or more bonds
      # 'Jmultibond'		# J coupling over more than one bond
      # 'relayed'		# relayed through multiple J couplings (multistep transfer,  TOCSY, ...)
      # 'relayed-alternate'	# a solid state TOCSY transfer type with alternating peak sign
      # 'through-space' 	# Through-space transfer (NOESY, ROESY,.. but also J coupling across H-bonds)


# For peak lists with different dimensionality tags are added and removed to fit.
# The example here is for a 3D peak list
#
# Dimensions are given in the order of the _Spectrum.dimension_id defined above.

  loop_

      _peak.peak_id
      # _peak.component_id  # Optional - identifies subpeaks in multiplets
      _peak.volume
      _peak.volume_uncertainty
      _peak.height
      _peak.height_uncertainty
      _peak.position_1
      _peak.position_uncertainty_1
      _peak.position_2
      _peak.position_uncertainty_2
      _peak.position_3
      _peak.position_uncertainty_3
      _peak.chain_code_1
      _peak.sequence_code_1
      _peak.residue_type_1
      _peak.atom_name_1
      _peak.chain_code_2
      _peak.sequence_code_2
      _peak.residue_type_2
      _peak.atom_name_2
      _peak.chain_code_3
      _peak.sequence_code_3
      _peak.residue_type_3
      _peak.atom_name_3

1 7.3E7 5.1E6 3.3E7 1.1E6  3.2 ? 119.5 ? 8.3 ? A 19 LEU HBY A 17 GLN N   A 17 GLN H
1 7.3E7 5.1E6 3.3E7 1.1E6  3.2 ? 119.5 ? 8.3 ? A 20 CYS HBX A 17 GLN N   A 17 GLN H
1 7.3E7 5.1E6 3.3E7 1.1E6  3.2 ? 119.5 ? 8.3 ? A 19 LEU HBY A 19 TYR N   A 19 TYR H
1 7.3E7 5.1E6 3.3E7 1.1E6  3.2 ? 119.5 ? 8.3 ? A 20 CYS HBX A 19 TYR N   A 19 TYR H
1 7.3E7 5.1E6 3.3E7 1.1E6  3.2 ? 119.5 ? 8.3 ? A 14 TRP HB3 A 18 PHE N   A 18 PHE H
3 5.4E7 7.3E6 3.4E7 5.3E6  4.4 ? 106.5 ? 7.8 ? ?  ?  ?   ?  A 15 GLY N   A 15 GLY H
4 8.8E7 1.3E7 4.8E7 3.3E6  3.2 ? 135.6 ? 9.9 ? A 14 TRP HB3 A 14 TRP NE1 A 14 TRP HE1
5 8.8E7 1.3E7 5.8E7 2.3E7  3.4 ? 135.6 ? 9.9 ? A 14 TRP HB2 A 14 TRP NE1 A 14 TRP HE1
5 8.8E7 1.3E7 5.8E7 2.3E7  3.4 ? 135.6 ? 9.9 ? A 24 ASP HBY A 14 TRP NE1 A 14 TRP HE1
7 5.9E7 7.1E6 2.9E7 6.1E6  1.7 ? 118.3 ? 9.1 ? ?  ?  ?   ?  X @5 GLX N   X @5 GLX H
  stop_

# Peaks 1 and 5 have ambiguous assignments.

# The frequency for A 14 Trp NE1 at 135.6 is likely outside the
# acquisition window. Since absolute_peak_positions is true for this dimension, 
# the peak is given at the correct resonance frequency, rather than at 
# the apparent position within the acquisition window.

# Volumes and peak position information are duplicated on each line belonging to a peak
# All such values must be identical, and written out as such. Programs may or may not
# check for errors when reading.

save_


#=======================================================================
# Section 9
#
# Optional: Linkage table for peaks and restraints
#
# Singleton (only one per project)
#
#=======================================================================

save_peak_restraint_links

# Mandatory parameters
  _link_table.sf_category           		peak_restraint_links
  _link_table.sf_framecode           		peak_restraint_links

loop_
  _peak_restraint_link.nmr_spectrum_id
  _peak_restraint_link.peak_id
  _peak_restraint_link.restraint_list_id
  _peak_restraint_link.restraint_id
  $nmr_spectrum_cnoesy1     1   $distance_restraint_list_L1     73
  $nmr_spectrum_cnoesy1     1   $distance_restraint_list_L1    233
  $nmr_spectrum_cnoesy1   577   $distance_restraint_list_L2     12
  $nmr_spectrum_nnoesy1   126   $distance_restraint_list_L1    359
  $nmr_spectrum_nnoesy1    44   $distance_restraint_list_L4   2755
  $nmr_spectrum_cnoesy1   316   $distance_restraint_list_L4   2755
  $nmr_spectrum_rdc1       12   $rdc_restraint_list_L5          37
stop_

# The table gives links between peaks (in any spectrum) and restraints
# (in any restraint list of any type). 
# There can be multiple restraint per peak, and vice versa.

save_
